<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>Rules Tests</title>
		
		<link href="../Common/Styles/qunit.css" type="text/css" rel="stylesheet" />
		
		<script src="../Common/Scripts/JQuery/jquery-1.3.2.js" type="text/javascript"></script>
		<script src="../Common/Scripts/QUnit/qunit.js" type="text/javascript"></script>
		<script src="../Common/Scripts/Microsoft/MicrosoftAjax.js" type="text/javascript"></script>
		<script src="../Common/Scripts/ExoWeb/exoweb.js" type="text/javascript"></script>
		<script src="../Common/Scripts/QUnit/qunit.ext.js" type="text/javascript"></script>
		<script src="../Common/Scripts/ExoWeb/exoweb.model.js" type="text/javascript"></script>
		<script src="../Common/Scripts/ExoWeb/exoweb.mapper.js" type="text/javascript"></script>
		<script src="../Common/Scripts/ExoWeb/exoweb.mock.js" type="text/javascript"></script>
		<script src="../Common/Scripts/mock-driver.js" type="text/javascript"></script>
		
		<script type="text/javascript">
			var context = ExoWeb.context({ model: { driver: { id: "1", from: "Driver" } } });

			setupTest("allowed-values-basic", { description: "Basic Allowed Values Tests", expect: 2 }, function() {
				var rule = Driver.$Cars.rule(ExoWeb.Model.Rule.allowedValues);
				ok(rule, "Rule can be retrieved via Property.rule(type)");
				same(context.model.driver.get_Dealer().get_AvailableCars(), rule.values(context.model.driver),
					"Allowed values rule \"values\" function should return the referenced property value.");
			});

			setupTest("compare-number-gte", { description: "Compare Rule (number greater than or equal to)", expect: 3 }, function () {
				var rule = new ExoWeb.Model.Rule.compare({ compareOperator: "GreaterThanEqual", comparePath: "this.OtherMilesDriven" }, [Driver.$MilesDriven, Driver.$OtherMilesDriven], null);

				context.model.driver.set_OtherMilesDriven(100000);
				ok(rule.satisfies(context.model.driver), "Comparison should be valid: equal");

				context.model.driver.set_OtherMilesDriven(1000);
				ok(rule.satisfies(context.model.driver), "Comparison should be valid: greater than");

				context.model.driver.set_OtherMilesDriven(10000000);
				ok(!rule.satisfies(context.model.driver), "Comparison should not be valid: less than");
			});

			setupTest("compare-conditions", { description: "Compare Rule Attached Conditions", expect: 4 }, function () {
				var rule = Driver.$DateCreated.rule(ExoWeb.Model.Rule.compare);
				ok(rule, "Rule can be retrieved via Property.rule(type)");

				equals(context.model.driver.meta.conditions(Driver.$DateCreated).length, 0, "No condition attached for rule");

				context.model.driver.set_DateCreated(new Date(1950, 1, 1));
				equals(context.model.driver.meta.conditions(Driver.$DateCreated).length, 1, "Condition attached for rule");

				context.model.driver.set_BirthDate(new Date(1949, 1, 1));
				equals(context.model.driver.meta.conditions(Driver.$DateCreated).length, 0, "Condition attached for rule");
			});

			var hasRunDriverDescription = false;
			function calculateDriverDescription() {
				hasRunDriverDescription = true;
				return $format("Driver \"{Name}\" owned by \"{Owner.Name}\".", this);
			}

			setupTest("rule-force-execution", { description: "Forcing Execution of a Rule's Properties", expect: 4 }, function() {
				equals(context.model.driver.get_Description(), calculateDriverDescription.call(context.model.driver), "Property should have been calculated");

				hasRunDriverDescription = false;
				context.model.driver.set_Name(context.model.driver.get_Name() + " Jr.");
				ok(hasRunDriverDescription, "Rule should run after related property changes");

				hasRunDriverDescription = false;
				Person.meta.executeRules(context.model.driver, Driver.$Description);
				ok(hasRunDriverDescription, "Rule should run after calling \"executeRules()\" on Driver.$Description");

				hasRunDriverDescription = false;
				Person.meta.executeRules(context.model.driver.get_Owner(), CarOwner.$Name);
				ok(!hasRunDriverDescription, "Rule should NOT run after calling \"executeRules()\" on CarOwner.$Name since it is not a target of the rule");
			});

			context.ready(function () {
				executeTest("allowed-values-basic");

				Driver.meta.addProperty({ name: "OtherMilesDriven", type: Number });

				executeTest("compare-number-gte");
				executeTest("compare-conditions");

				Driver.meta.addProperty({ name: "Description", type: String }).calculated({
					fn: calculateDriverDescription,
					basedOn: ["this.Owner.Name", "this.Name"]
				});

				Driver.$Description._readySignal.waitForAll(function () {
					executeTest("rule-force-execution");
				});
			});
		</script>
	</head>
	<body xmlns:sys="javascript:Sys" xmlns:dataview="javascript:Sys.UI.DataView" xmlns:content="javascript:ExoWeb.UI.Content"
		xmlns:template="javascript:ExoWeb.UI.Template" sys:activate="*">
		
		<!-- QUnit Display -->
		<h1 id="qunit-header">Test Results:</h1>
		<h2 id="qunit-banner"></h2>
		<h2 id="qunit-userAgent"></h2>
		<ol id="qunit-tests"></ol>
	</body>
</html>
