<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>Format Tests</title>
		<link href="../Common/Styles/qunit.css" type="text/css" rel="stylesheet" />

		<script src="../Common/Scripts/JQuery/jquery-1.3.2.js" type="text/javascript"></script>
		<script src="../Common/Scripts/QUnit/qunit.js" type="text/javascript"></script>
		<script src="../Common/Scripts/Microsoft/MicrosoftAjax.debug.js" type="text/javascript"></script>
		<script src="../Common/Scripts/Microsoft/MicrosoftAjaxTemplates.debug.js" type="text/javascript"></script>
		<script src="../Common/Scripts/ExoWeb/exoweb-msajax.js" type="text/javascript"></script>
		<script src="../Common/Scripts/QUnit/qunit.ext.js" type="text/javascript"></script>
		<script type="text/javascript" src="../Common/Model/types.js"></script>
		<script type="text/javascript" src="../Common/Model/instances.js"></script>
		<script type="text/javascript">

			// Entity
			defineTest("Entity", {
				description: "Entity",
				expect: 7,
				fn: function () {
					equals(Movie.meta.get("robin_hood"), "Robin Hood (2010)", "Verifying default entity formatting");
					equals(Movie.meta.get("robin_hood").toString("[Name] ([Released])"), "Robin Hood (5/14/2010)", "Verifying default format for Released property derived from model");
					equals(Movie.meta.get("robin_hood").toString("[Name] ([Released:Y])"), "Robin Hood (May, 2010)", "Verifying explicit format for Released property used from expression");
					equals(Role.meta.get("robin_hood_robin_longstride").toString(), "Russell Crowe played Robin Longstride in Robin Hood (2010)", "Verifying cascading entity formatting");
					equals(Role.meta.get("robin_hood_robin_longstride").toString("[Actor.Person] played the [Lead:lead ;]role of [Name] in [Movie.Name], released on [Movie.Released]"),
						"Russell Crowe played the lead role of Robin Longstride in Robin Hood, released on 5/14/2010", 
						"Verifying complex formatting including boolean expressions, property paths, and default formatting along a path.");
					equals(Role.meta.get("robin_hood_marion_loxley").toString("[Actor.Person] played the [Lead:lead ;]role of [Name] in [Movie.Name], released on [Movie.Released:MMM d, yyyy]"),
						"Cate Blanchett played the role of Marion Loxley in Robin Hood, released on May 14, 2010",
						"Verifying complex formatting including boolean expressions, property paths, and default formatting along a path.");
					equals(Movie.meta.get("robin_hood").toString("[Name] - \\[[Released:MMM\\\\\\yyyy]\\] \\[Adventure\\]"), "Robin Hood - [May\\2010] [Adventure]", "Verifying escaping of [, ], and \\ in format expressions");
				}
			});

			function roundtrip(val, format, expected) {
				var formatter = ExoWeb.Model.getFormat(val.constructor, format);
				var actual = formatter.convert(val);
				equals(actual, expected, "Formatted value should equal expected value.");
				var roundtripped = formatter.convertBack(actual);
				equals(roundtripped.valueOf(), val.valueOf(), "Roundtripped value should equal original value.");
			}

			// Number (General)
			test("Number (General)", function () {
				roundtrip(10, "G", "10");
				roundtrip(10.01234000, "G", "10.01234");
				roundtrip(0.00010, "G", "0.0001");
				roundtrip(10E5, "G", "1000000");
				roundtrip(-38902.998, "G", "-38902.998");
			});

			// Number (Digits)
			test("Number (Digits)", function () {
				roundtrip(10392, "D", "10392");
				roundtrip(10289993, "D0", "10289993");
				roundtrip(829, "D4", "0829");
				roundtrip(10E5, "D2", "1000000");
				roundtrip(-38902, "D", "-38902");
			});

			// Number (Number)
			test("Number (Number)", function () {
				roundtrip(10392.93, "N", "10,392.93");
				roundtrip(10289993, "N0", "10,289,993");
				roundtrip(0.01, "N4", "0.0100");
				roundtrip(10E5, "N2", "1,000,000.00");
				roundtrip(-38902.99, "N", "-38,902.99");
			});

			// Number (Currency)
			test("Number (Currency)", function () {
				roundtrip(10, "C", "$10.00");
				roundtrip(10, "C0", "$10");
				roundtrip(0.01, "C", "$0.01");
				roundtrip(10E5, "C", "$1,000,000.00");
				roundtrip(-38902.99, "C", "($38,902.99)");
			});

			// Number (Percentage)
			test("Number (Percentage)", function () {
				roundtrip(10, "P", "1,000.00 %");
				roundtrip(10, "P0", "1,000 %");
				roundtrip(0.0196, "P", "1.96 %");
				roundtrip(10E5, "P4", "100,000,000.0000 %");
				roundtrip(-38902.99, "P", "-3,890,299.00 %");
			});

			// Date (General)
			test("Date (General)", function () {
				roundtrip(new Date("1/1/2012 11:55 pm"), "g", "1/1/2012 11:55 PM");
				roundtrip(new Date("1/1/2012"), "g", "1/1/2012 12:00 AM");
				roundtrip(new Date("1/1/2012 11:55:15 pm"), "G", "1/1/2012 11:55:15 PM");
				roundtrip(new Date("1/1/2012"), "G", "1/1/2012 12:00:00 AM");
			});

			// Date (Short Date)
			test("Date (Short Date)", function () {
				roundtrip(new Date("1/1/2012"), "d", "1/1/2012");
			});

			// Date (Long Date)
			test("Date (Long Date)", function () {
				roundtrip(new Date("1/1/2012"), "D", "Sunday, January 01, 2012");
			});

			// Date (Short Time)
			test("Date (Short Time)", function () {
				var time = new Date();
				time.setMonth(0, 1);
				time.setHours(12, 15, 0, 0);
				roundtrip(time, "t", "12:15 PM");
			});

			// Date (Long Time)
			test("Date (Long Time)", function () {
				var time = new Date();
				time.setMonth(0, 1);
				time.setHours(12, 15, 09, 00);
				roundtrip(time, "T", "12:15:09 PM");
			});

			// Date (Long Date, Short Time)
			test("Date (Long Date, Short Time)", function () {
				roundtrip(new Date("1/1/2012 1:15 pm"), "f", "Sunday, January 01, 2012 1:15 PM");
			});

			// Date (Long Date, Long Time)
			test("Date (Long Date, Long Time)", function () {
				roundtrip(new Date("1/1/2012 1:15:19 pm"), "F", "Sunday, January 01, 2012 1:15:19 PM");
			});

			// Date (Month, Year)
			test("Date (Month, Year)", function () {
				roundtrip(new Date("1/1/2012"), "Y", "January, 2012");
			});

			// Date (Month Day)
			test("Date (Month Day)", function () {
				roundtrip(new Date("1/1/2012"), "M", "January 01");
			});

			// Date (Custom)
			test("Date (Custom)", function () {
				roundtrip(new Date("1/1/2012"), "M/d/yy", "1/1/12");
				roundtrip(new Date("1/1/2012"), "MMM d, yyyy", "Jan 1, 2012");
				roundtrip(new Date("1/1/2012"), "MMM d, yyyy", "Jan 1, 2012");
				var dt = new Date("1/1/2012 1:15:19 pm");
				dt.setMilliseconds(129);
				roundtrip(dt, "M/d/yyyy HH:mm:ss.fff", "1/1/2012 13:15:19.129");
			});

			// Boolean
			test("Boolean", function () {
				roundtrip(true, "Yes;No", "Yes");
				roundtrip(false, "Yes;No", "No");
			});

			ExoWeb.config.debug = true;

			executeAllTests();

		</script>
	</head>
	<body>
		<!-- QUnit Display -->
		<h1 id="qunit-header">Test Results:</h1>
		<h2 id="qunit-banner"></h2>
		<h2 id="qunit-userAgent"></h2>
		<ol id="qunit-tests"></ol>
	</body>
</html>
