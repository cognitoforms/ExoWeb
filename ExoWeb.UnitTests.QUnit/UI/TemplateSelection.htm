<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>Server-side rendering with client-side linking</title>
		<link href="../Common/Styles/qunit.css" type="text/css" rel="stylesheet" />
		<style type="text/css">
			.sys-template {display:none;}
			#dataview_container, #content_container_movie1, #content_container_movie2_div, #content_container_movie2_span, #content_container_movie3 {margin:0; padding:20px 0;}
		</style>
		<script type="text/javascript" src="../Common/Scripts/JQuery/jquery-1.3.2.js"></script>
		<script type="text/javascript" src="../Common/Scripts/QUnit/qunit.js"></script>
		<script type="text/javascript" src="../Common/Scripts/Microsoft/MicrosoftAjax.debug.js"></script>
		<script type="text/javascript" src="../Common/Scripts/Microsoft/MicrosoftAjaxTemplates.debug.js"></script>
		<script type="text/javascript" src="../Common/Scripts/ExoWeb/exoweb-msajax.js"></script>
		<script type="text/javascript" src="../Common/Scripts/QUnit/qunit.ext.js"></script>
		<script type="text/javascript">

			$exoweb(function() {
				ExoWeb.UI.Template.load("../Common/Scripts/ExoWeb/exoweb-templates.htm");
			});

			ExoWeb.setErrorHandler(function() { });

		</script>
		<script type="text/javascript" src="../Common/Model/types.js"></script>
		<script type="text/javascript" src="../Common/Model/instances.js"></script>
		<script type="text/javascript">

			defineTest("field selection", {
				description: "field control selection based on type",
				expect: 7,
				fn: function() {
					equals($("#dataview_container").find(".url .field span input[type=text]").length, 1, "should be a text field for url");
					equals($("#dataview_container").find(".title .field span input[type=text]").length, 1, "should be a text field for title");
					equals($("#dataview_container").find(".year .field span input[type=text]").length, 1, "should be a text field for year (numeric)");
					equals($("#dataview_container").find(".rated .field span input[type=text]").length, 1, "should be a text field for rating");
					equals($("#dataview_container").find(".released .field span input[type=text].datepicker").length, 1, "should be a datepicker text field for released date");
					equals($("#dataview_container").find(".genres .field span input[type=checkbox]:checked").length, 3, "should be 3 checked genres");
					equals($("#dataview_container").find(".director .field span select").length, 1, "should be a select field for director");
				}
			});

			defineTest("name-based template selection", {
				description: "template selection based on a template name declared by the content control",
				expect: 1,
				fn: function() {
					equals($("#content_container_movie1").find(".content_container_movie1_match").length, 1, "should be class name found in expected template match");
				}
			});

			defineTest("tag-based template selection", {
				description: "template selection should account for the element of the content and template controls",
				expect: 2,
				fn: function() {
					equals($("#content_container_movie2_div").find(".content_container_div_match").length, 1, "template selection should account for the element of the content and template controls");
					equals($("#content_container_movie2_span").find(".content_container_span_match").length, 1, "template selection should account for the element of the content and template controls");
				}
			});

			defineTest("cascading names", {
				description: "template names should cascade to child content controls",
				expect: 6,
				fn: function() {
					equals($("#content_container_movie3").find(".content_container_movie3_year_match").length, 1, "verify cascade of content:template");
					equals($("#content_container_movie3").find(".content_container_movie3_rating_match").length, 1, "verify cascade of content:template");
					equals($("#content_container_movie4").find(".content_container_movie4_genres_name_match").length, 3, "verify cascade of sys:content-template");
					equals($("#content_container_movie4").find(".content_container_movie4_roles_name_match").length, 3, "verify cascade of sys:content-template");
					equals($("#content_container_movie5").find(".content_container_movie5_match").length, 1, "verify cascade of sys:content-template on root-level dataview");
					equals($("#content_container_movie6").find(".content_container_movie6_match").length, 1, "verify cascade of sys:content-template on root-level content control");
				}
			});
			
			defineTest("datatype", {
				description: "template should match based on datatype",
				expect: 2,
				fn: function() {
					equals($("#content_container_movie7").find(".content_container_movie7_match").length, 1, "verify datatype template selection");
					equals($("#content_container_name1").find(".content_container_name1_match").length, 1, "verify datatype template selection, accounting for inheritence");
				}
			});

			timeoutTests(2000);

			ExoWeb.config.debug = true;

			$exoweb({
				model: {
					movie: { from: "Movie", id: "robin_hood" }
				},
				domReady: function() {
					executeAllTests();
				}
			});

		</script>
	</head>
	<body xmlns:sys="javascript:Sys" xmlns:dataview="javascript:Sys.UI.DataView" xmlns:content="javascript:ExoWeb.UI.Content"
		xmlns:toggle="javascript:ExoWeb.UI.Toggle" xmlns:template="javascript:ExoWeb.UI.Template" sys:activate="*">

		<!-- QUnit Display -->
		<h1 id="qunit-header">Test Results:</h1>
		<h2 id="qunit-banner"></h2>
		<h2 id="qunit-userAgent"></h2>
		<ol id="qunit-tests"></ol>

		<table width="100%">
			<tbody>
				<tr>
					<td valign="top">
						<!-- standard field selection -->
						<div id="dataview_container" class="sys-template" sys:attach="dataview" dataview:data="{~ context.model.movie, source=window }">
							<div class="url" sys:attach="content" content:template="form" content:data="{@ PosterUrl }"></div>
							<div class="title" sys:attach="content" content:template="form" content:data="{@ Name }"></div>
							<div class="year" sys:attach="content" content:template="form" content:data="{@ Year }"></div>
							<div class="rated" sys:attach="content" content:template="form" content:data="{@ Rated }"></div>
							<div class="released" sys:attach="content" content:template="form" content:data="{@ Released }"></div>
							<div class="genres" sys:attach="content" content:template="form" content:data="{@ Genres }"></div>
							<div class="director" sys:attach="content" content:template="form" content:data="{@ Director }"></div>
						</div>
					</td>
					<td valign="top">
						<!-- template is selected based on template name match -->
						<p id="content_container_movie1" sys:attach="content" content:template="movie1" content:data="{~ context.model.movie, source=window }"></p>

						<!-- template is selected based on name match AND tag name of content control and template control -->
						<div id="content_container_movie2_div" sys:attach="content" content:template="movie2" content:data="{~ context.model.movie, source=window }"></div>

						<!-- template is selected based on name match AND tag name of content control and template control -->
						<span id="content_container_movie2_span" sys:attach="content" content:template="movie2" content:data="{~ context.model.movie, source=window }"></span>

						<!-- template is selected based on cascading name specified on content control  -->
						<div id="content_container_movie3" sys:attach="content" content:template="movie3" content:data="{~ context.model.movie, source=window }"></div>

						<!-- template is selected based on cascading name specified on content control  -->
						<div id="content_container_movie4" sys:attach="content" content:template="movie4" content:data="{~ context.model.movie, source=window }"></div>

						<!-- template is selected based on cascading name specified on root-level dataview  -->
						<div id="content_container_movie5" class="sys-template" sys:content-template="movie5" sys:attach="dataview" dataview:data="{~ context.model.movie, source=window }">
							<div sys:attach="content" content:data="{{ $dataItem }}"></div>
						</div>

						<!-- template is selected based on cascading name specified on root-level content control  -->
						<div id="content_container_movie6" sys:content-template="movie6" sys:attach="content" content:data="{~ context.model.movie, source=window }"></div>

						<!-- template is selected based on datatype -->
						<div id="content_container_movie7" sys:content-template="movie7" sys:attach="content" content:data="{~ context.model.movie, source=window }"></div>

						<!-- template is selected based on datatype, accounting for inheritence -->
						<div id="content_container_name1" sys:content-template="name1" sys:attach="content" content:data="{~ context.model.movie, source=window }"></div>
					</td>
				</tr>
			</tbody>
		</table>

		<!-- template is selected based on template name match -->
		<p class="sys-template" sys:attach="template" template:name="movie1">
			Title is <span class="content_container_movie1_match">{binding Name}</span>
		</p>

		<!-- template is selected based on name match AND tag name of content control and template control -->
		<div class="sys-template" sys:attach="template" template:name="movie2">
			<h3 class="content_container_div_match">{binding Name}</h3>
			<i>{binding Released}</i>
		</div>
		<span class="sys-template" sys:attach="template" template:name="movie2">
			<span class="content_container_span_match">{binding Name}</span> - <i>{binding Released}</i>
		</span>

		<!-- template is selected based on cascading name specified on content control  -->
		<div class="sys-template" sys:attach="template" template:name="movie3" sys:content-template="movie3">
			<h3>{binding Name}</h3>
			<div>Year and rating:
				<span sys:attach="content" content:template="year rating" content:data="{{ $dataItem }}"></span>
			</div>
		</div>
		<span class="sys-template" sys:attach="template" template:name="movie3 year rating">
			<span class="content_container_movie3_year_match">{binding Year}</span> - 
			<span class="content_container_movie3_rating_match">{binding Rated}</span>
		</span>

		<!-- template is selected based on cascading names specified on containing elements -->
		<div class="sys-template" sys:attach="template" template:name="movie4" sys:content-template="movie4">
			<h3>{binding Name}</h3>
			<div sys:content-template="genres">
				<h4>Genres:</h4>
				<div class="sys-template" sys:attach="dataview" dataview:data="{binding Genres}">
					<span sys:attach="content" content:template="name" content:data="{{ $dataItem }}"></span>
				</div>
			</div>
			<div>
				<h4>Roles:</h4>
				<div class="sys-template" sys:attach="toggle" toggle:on="{binding Roles}" toggle:action="render">
					<div sys:content-template="roles" class="sys-template" sys:attach="dataview" dataview:data="{binding Roles}">
						<span sys:attach="content" content:template="name" content:data="{{ $dataItem }}"></span>
					</div>
				</div>
			</div>
		</div>
		<span class="sys-template" sys:attach="template" template:name="movie4 genres name">
			<span class="content_container_movie4_genres_name_match">{binding Name}</span><span sys:if="{{ !$isLast($context.parentContext.containerElement.control, $context.parentContext.index) }}">, </span>
		</span>
		<span class="sys-template" sys:attach="template" template:name="movie4 roles name">
			<span class="content_container_movie4_roles_name_match">{binding Name}</span><span sys:if="{{ !$isLast($context.parentContext.containerElement.control, $context.parentContext.index) }}">, </span>
		</span>

		<!-- template is selected based on cascading names specified on root-level dataview -->
		<div class="sys-template" sys:attach="template" template:name="movie5">
			<h3 class="content_container_movie5_match">{binding Name}</h3>
		</div>

		<!-- template is selected based on cascading names specified on root-level content control -->
		<div class="sys-template" sys:attach="template" template:name="movie6">
			<h3 class="content_container_movie6_match">{binding Name}</h3>
		</div>
		
		<!-- template is selected based on datatype -->
		<div class="sys-template" sys:attach="template" template:name="movie7" template:datatype="Movie">
			<h3 class="content_container_movie7_match">{binding Name}</h3>
		</div>
		
		<!-- template is selected based on datatype, accounting for inheritence -->
		<div class="sys-template" sys:attach="template" template:name="name1" template:datatype="NamedItem">
			<h3 class="content_container_name1_match">{binding Name}</h3>
		</div>
	</body>
</html>
