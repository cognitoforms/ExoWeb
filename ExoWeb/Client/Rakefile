@prefix = File.dirname(__FILE__)

@src_dir = ENV["SRC_DIR"] || File.join(@prefix, "src")
@dist_dir = ENV["DIST_DIR"] || File.join(@prefix, "dist")

@no_jslint = ENV["NO_JSLINT"]

# returns the contents of the given file, with each line
# indented with the given number of tabs
def read file, indent=0, exports=nil
	result = ""
	File.open(file, "r") do |f|
		last_line = nil
		removed = false
		while (line = f.gets)
			# ignore export statements
			if (line =~ /^\s*exports\.(.*\s*=\s*.*;)\s*\/\/\s*IGNORE$/) == 0 then
				removed = true
				next
			end
			# ignore reference file comments
			if (line =~ /^\s*\/\/\/\s*\<reference\s/) == 0 then
				removed = true
				next
			end
			# ignore require statements
			if (line =~ /(var [A-Za-z_$][A-Za-z_$0-9]* = )?require\(/) == 0 then
				removed = true
				next
			end
			# ignore a second empty line for removed lines that were sandwiched between empty lines
			if removed and (line =~ /^\s*$/) == 0 then
				removed = true
				next
			end
			# translate export statements
			if (line =~ /^\s*exports\.(.*\s*=\s*.*;)$/) == 0
				line = line.sub(/^\s*exports\.(.*\s*=\s*.*;)$/, exports + ".\\1")
			end
			# indent all non-empty lines
			if indent > 0 and (line =~ /\A\s*\Z/) == nil and (line =~ /\A\/\/\t+/) == nil
				result += ("\t" * indent)
			end
			result += line
			removed = false
		end
	end
	return result
end

# define the files in each module
@src_files = {
	"base/core" => %w{
		Config
		Errors
		Warnings
		TypeChecking
		Random
		Function
		Array
		String
		Cache
		Activity
		Batch
		Signal
		Functor
		FunctionChain
		EventScope
		EvalWrapper
		Transform
		Translator
		Utilities
		TimeSpan
		Date
		Object
		Observer
		PropertyObserver},

	"base/model" => %w{
		Resource	
		Format
		Model
		Entity
		Type
		Property
		PathTokens
		PropertyChain
		ObjectMeta
		RuleInvocationType
		Rule
		RuleInput
		ConditionRule
		ValidatedPropertyRule
		CalculatedPropertyRule
		RequiredRule
		RangeRule
		AllowedValuesRule
		CompareRule
		RequiredIfRule
		StringLengthRule
		StringFormatRule
		ListLengthRule
		ConditionTypeSet
		ConditionType
		ConditionTarget
		Condition
		FormatError
		FormatProvider
		LazyLoader
		Utilities},

	"base/mapper" => %w{
		ObjectProvider
		QueryProvider
		TypeProvider
		ListProvider
		RoundtripProvider
		SaveProvider
		EventProvider
		ResponseHandler
		Translation
		ExoModelEventListener
		ChangeSet
		ChangeLog
		ServerSync
		Internals
		TypeLazyLoader
		ObjectLazyLoader
		ListLazyLoader
		Context
		ContextQuery
		ExoWeb
		Extend},

	"base/ui" => %w{
		Toggle
		ToggleGroup
		Template
		Content
		DataView
		Html
		Behavior
		Utilities},

	"base/view" => %w{
		AdapterMarkupExtension
		MetaMarkupExtension
		ConditionMarkupExtension
		Binding
		LazyMarkupExtension
		Adapter
		OptionAdapter
		OptionGroupAdapter
		MsAjax},

	"extensions/jquery-msajax" => %w{
		Validation
		Selectors
		Helpers
		Ever},

	"base/mock" => %w{Mock},
	
	"extensions/dotnet" => %w{WebService},

	"extensions/msajax" => %w{FormatProvider ObserverProvider}
}

@exports = {
	"base/core" => "ExoWeb",
	"base/mapper" => "ExoWeb.Mapper",
	"base/model" => "ExoWeb.Model",
	"base/view" => "ExoWeb.View",
	"base/ui" => "ExoWeb.UI",
	"extensions/jquery-msajax" => nil,
	"extensions/dotnet" => "ExoWeb.DotNet"
}

def build_content(header_args, dir, files, indent, exports)
	namespace = ""
	if (exports) 
		namespace = exports + "."
	end
	return files.map do |file|
			str = "\n" + ("\t" * indent) + "// #region " + namespace + file
			str += "\n" + ("\t" * indent) + ("/" * 50) + "\n\n"
			str += read(File.join(dir, file + ".js"), indent, exports)
			str += "\n" + ("\t" * indent) + "// #endregion\n"
			str
		end.join("")
end

def jshint(file_name)
	if system("node --version")
		in_path = File.join(@dist_dir, file_name + ".js")
		sh "node runjshint.js " + in_path
	end
end

def minify(file_name)
#	if system("dir")
#		run = File.join(@prefix, 'ref/jsmin/jsmin.exe')
#	else
#		run = File.join(@prefix, 'ref/jsmin/jsmin')
#	end
#
#	path = File.join(@dist_dir, file_name)
#	sh run + " < " + path + ".js > " + path + ".min.js"
end

def get_spec_files(dir_name, prefix)
	res = []
	Dir.entries(File.join(dir_name, prefix)).each do |item|
		if (item =~ /^\.*$/) == nil && File::directory?(File.join(File.join(dir_name, prefix), item))
			get_spec_files(dir_name, File.join(prefix, item)).each do |file|
				res.push(file)
			end
		elsif (item =~ /^([^\.]*)Specs\.js$/) == 0
			res.push(File.join(prefix, item))
		elsif (item.gsub(/\./, "").length > 0 and prefix.length > 0)
			raise ("invalid spec file " + item)
		end
	end
	return res
end

task :run_specs do
	if system("node --version")
		get_spec_files(File.join(Dir.pwd, 'specs'), '').each do |file|
			sh "node specs" + file + " -no-date-time"
		end
	end
end

task :build_jquery_msajax_plugin do
	File.open(File.join(@dist_dir, "jquery.exoweb-msajax.js"), "w") do |f|
		f.write("\n// jquery plugin for msajax helper\n" + ("/" * 50) + "\n(function() {\n")
		src_dir = File.join(File.join(@src_dir, "extensions"), "jquery-msajax")
		header = "jquery plugin for msajax helper"
		f.write(build_content([header], src_dir, @src_files["extensions/jquery-msajax"], 1, @exports["extensions/jquery-msajax"]))
		f.write("\n})();")
	end
	puts("completed build_jquery_msajax_plugin task")
	jshint("jquery.exoweb-msajax")
	minify("jquery.exoweb-msajax")
end

task :build_msajax_nojquery do
	File.open(File.join(@dist_dir, "exoweb-msajax-nojquery.js"), "w") do |f|
		f.write("window.ExoWeb = {};\n")
		["Model", "Mapper", "UI", "View", "DotNet"].each { |ns| f.write("window.ExoWeb." + ns + " = {};\n") }
		f.write("\n(function() {\n")
		
		["base/core", "base/model", "base/mapper", "base/ui", "base/view", "extensions/dotnet", "extensions/msajax"].each do |name|
			src_dir = @src_dir
			names = name.split("/")
			names.each { |step| src_dir = File.join(src_dir, step) }
			
			f.write(build_content([names[names.length - 1]], src_dir, @src_files[name], 1, @exports[name]))
		end

		f.write("})();\n");
	end
	puts("completed build_msajax_nojquery task")
	jshint("exoweb-msajax-nojquery")
	minify("exoweb-msajax-nojquery")
end

task :build_msajax do
	File.open(File.join(@dist_dir, "exoweb-msajax.js"), "w") do |f|
		f.write("window.ExoWeb = {};\n")
		["Model", "Mapper", "UI", "View", "DotNet"].each { |ns| f.write("window.ExoWeb." + ns + " = {};\n") }
		f.write("\n(function(jQuery) {\n")
		
		["base/core", "base/model", "base/mapper", "base/ui", "base/view", "extensions/jquery-msajax", "extensions/dotnet", "extensions/msajax"].each do |name|
			src_dir = @src_dir
			names = name.split("/")
			names.each { |step| src_dir = File.join(src_dir, step) }
			
			f.write(build_content([names[names.length - 1]], src_dir, @src_files[name], 1, @exports[name]))
		end
		
		f.write("})(window.ExoJQuery || jQuery);\n");
	end
	puts("completed build_msajax task")
	jshint("exoweb-msajax")
	minify("exoweb-msajax")
end

task :build_mock do
	File.open(File.join(@dist_dir, "exoweb-mock.js"), "w") do |f|
		f.write("window.ExoWeb = {};\n")
		f.write("\n(function() {\n")
		
		["base/mock"].each do |name|
			src_dir = @src_dir
			names = name.split("/")
			names.each { |step| src_dir = File.join(src_dir, step) }
			
			f.write(build_content([names[names.length - 1]], src_dir, @src_files[name], 1, @exports[name]))
		end
		
		f.write("})();\n");
	end
	puts("completed build_mock task")
	jshint("exoweb-mock")
	minify("exoweb-mock")
end

task :build => [:build_msajax, :build_msajax_nojquery, :build_jquery_msajax_plugin, :build_mock] do
	puts("completed default task")
end

task :default => [:run_specs, :build] do
	puts("completed default task")
end
