<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
	<title></title>
	<script src="ref/jquery/jquery-1.7.2.js" type="text/javascript"></script>
	<script src="ref/jquery/jsrender.js" type="text/javascript"></script>
	<script src="ref/jquery/jquery.observable.js" type="text/javascript"></script>
	<script src="ref/jquery/jquery.views.js" type="text/javascript"></script>
	<script src="ref/aspnetajax/MicrosoftAjax.debug.js" type="text/javascript"></script>
	<script src="ref/aspnetajax/MicrosoftAjaxTemplates.debug.js" type="text/javascript"></script>
	<script type="text/javascript" src="ref/syntaxhighlighter/shCore.js"></script>
	<script type="text/javascript" src="ref/syntaxhighlighter/shBrushJScript.js"></script>
	<link type="text/css" rel="stylesheet" href="ref/syntaxhighlighter/shCoreDefault.css"/>

	<script type="text/javascript" src="dist/exoweb-msajax.js"></script>

	<style type="text/css">
		div#navigationContainer
		{
			width: 225px;
			float: left;
		}
		div#content
		{
			padding: 5px;
			display: block;
			margin-left: 225px;
		}
		div#navigation 
		{
			width: 200px;
			font-family: "Trebuchet MS",Verdana,Helvetica,Arial,sans-serif;
			font-size: 12px;
			font-weight: 400;
			text-overflow: clip;
			padding: 5px;
			border: 1px solid #EEEEEE;
			border-bottom-width: 0px;
			border-top-width: 0px;
			overflow: hidden;
		}
		.comment
		{
			width: 400px;
			font-family: "Trebuchet MS",Verdana,Helvetica,Arial,sans-serif;
			font-size:small;
			font-size: 0.8em;
			overflow: hidden;
			text-overflow: clip;
			vertical-align: top;
			padding: 0px;
			margin: 0px;
		}
		.code
		{
			font-family: Consolas,"Courier New";
			font-size: 0.8em;
			text-overflow: clip;
			overflow: hidden;
			vertical-align: top;
			padding: 0px;
			margin: 0px;
		}
		.title
		{
			width: 200px;
			font-family: "Trebuchet MS",Verdana,Helvetica,Arial,sans-serif;
			font-size: 14px;
			font-weight: 600;
			padding: 2px 0px 2px 10px;
			border: 1px solid #EEEEEE;	
		}
		
		div#navigation li
		{
			cursor: pointer;
			list-style: none outside none;
			border-bottom: 1px solid #EEEEEE;
			color: #0F67A1;
			display: block;
			font-size: 12px;
			line-height: 1.4;
			margin: 0;
			padding: 0.2em 10px;
		}
		div#navigation ul
		{
			margin: 0;
			padding-left: 15px;
		}
		li.namespace 
		{

		}
		
		li.type 
		{

		}
	</style>
</head>
<body>
	<div style="width: 100%">
		<div id="navigationContainer">
			<div class="title">ExoWeb API</div>
			<div id="navigation"></div>
		</div>
		<div id="content">&nbsp;</div>
	</div>

	<script id="summaryTemplate" type="text/x-jsrender">
		<li class="namespace">{{:name}}</li>
	</script>

	<script id="detailTemplate" type="text/x-jsrender">
		<li class="namespace">{{:name}}</li>
		<ul>
			{{for types}}
				<li class="type">{{:name}}</li>
			{{/for}}
		</ul>
	</script>

	<script type="text/javascript">

		$.get("dist/exoweb-msajax.js", function (script) {
			var beginRegion = /\#region ([A-Za-z0-9.]+)\.([A-Za-z0-9]+)/g;
			var endRegion = /\#endregion/;
			var result;

			// create a model for the documentation view
			var model = {
				namespaces: []
			};

			// define the currentNamespace property
			var currentNamespace = null;
			Object.defineProperty(model, "currentNamespace", {
				get: function () { return currentNamespace; },
				set: function (val) { currentNamespace = val; }
			});

			// process the script file to discover all types
			while ((result = beginRegion.exec(script)) !== null) {
				var namespace = null;

				// find the existing namespace, if possible
				for (var i = 0; i < model.namespaces.length; i++) {
					if (model.namespaces[i].name === result[1]) {
						namespace = model.namespaces[i];
						break;
					}
				}

				// otherwise, create a new namespace
				if (!namespace) {
					namespace = { name: result[1], types: [] };
					model.namespaces.push(namespace);
				}

				// add the type to the current namespace
				var source = script.substr(result.index, endRegion.exec(script.substr(result.index)).index);
				source = source.substr(source.indexOf("\n") + 1);
				namespace.types.push({
					namespace: namespace,
					name: result[2],
					source: source
				});
			}


			var selectedSubView = null,

			detailTemplate = $.templates("#detailTemplate"),

			summaryTemplate = $.templates("#summaryTemplate");

			function unselect() {
				/* Switch template of the selected view back to the summary template */
				if (selectedSubView) {
					selectedSubView.tmpl = summaryTemplate;
					selectedSubView.render();
					selectedSubView = null;
				}
			}

			/* Render the movies array as data-linked content under the movieList <ul>, using the summaryTemplate */
			summaryTemplate.link("#navigation", model.namespaces);

			// subscribe to click events on namespaces in the navigation
			$("#navigation").on("click", ".namespace", function (li) {
				for (var i = 0; i < model.namespaces.length; i++) {
					if (model.namespaces[i].name === li.target.textContent) {
						model.currentNamespace = model.namespaces[i];

						/* Unselect the currently selected view */
						unselect();

						/* Get the view which this clicked element
						belongs to, and make it the selected view */
						selectedSubView = $.view(this);

						/* Switch the template on this view to the detail template */
						selectedSubView.tmpl = detailTemplate;
						selectedSubView.render();

						break;
					}
				}
			});

			// subscribe to click events on types in the navigation
			$("#navigation").on("click", ".type", function (li) {
				for (var i = 0; i < model.currentNamespace.types.length; i++) {
					if (model.currentNamespace.types[i].name === li.target.textContent) {
						model.currentType = model.currentNamespace.types[i];

						var lines = model.currentType.source.split("\r\n");

						var comments = [];
						var code = [];
						var isComment = false;

						for (var l = 0; l < lines.length; l++) {
							var line = lines[l];
							if (/\w*\/\//.test(line)) {
								line = line.replace(/\/\/+/g, "");
								if (!isComment && line.trim() == "")
									continue;
								while (!isComment && code.length < comments.length)
									code.push(" &nbsp; ");
								isComment = true;
								while (comments.length < code.length)
									comments.push(" &nbsp; ");
								comments.push(line.replace(/\/\/+/g, ""));
							}
							else {
								isComment = false;
								code.push(line);
							}
						}
						var doc = "<table>";
						for (var l = 0; l < Math.max(comments.length, code.length); l++) {
							doc += "<tr><td class='comment'>" + (comments[l] || "") + "</td><td class='code'><pre class='brush: js;'>" + (code[l] || "") + "</pre></td></tr>";
						}
						doc += "</table>";

						$("#content").html(doc);

						// Format the source code
						$("#content pre").get().forEach(function (pre) {
							SyntaxHighlighter.highlight({ light: true }, pre);
						});
						

						break;
					}
				}
			});

		}, "html");

	</script>

</body>
</html>
