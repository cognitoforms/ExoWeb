<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>Inheritance Tests</title>
		<script src="../Scripts/JQuery/jquery-1.3.2.js" type="text/javascript"></script>
		<link href="../Styles/QUnit/qunit.css" type="text/css" rel="stylesheet" />
		<script src="../Scripts/QUnit/qunit.js" type="text/javascript"></script>
		<script src="../Scripts/MsAjax/MicrosoftAjax.debug.js" type="text/javascript"></script>
		<script src="../Scripts/MsAjax/MicrosoftAjaxTemplates.debug.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.model.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.mapper.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.view.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.ui.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.mock.js" type="text/javascript"></script>
		<script src="../Scripts/mock-driver.js" type="text/javascript"></script>
		<script type="text/javascript">
			$extend("Product", function(type) {
				type.formats.shortDesc = ExoWeb.Model.Format.fromTemplate("<Product> {Name}");
				type.formats.longDesc = type.formats.shortDesc;
			});

			$extend("UsedCar", function(type) {
				type.formats.longDesc = ExoWeb.Model.Format.fromTemplate("<UsedCar> {Name} with {MilesDriven} miles");
			});

		
			var model = $model({
				driver: { id: "1", from: "Driver" },
				dealer: { id: "1", from: "Dealer" },
				usedCar: {id: "200", from: "Car"}
			});

			// for some reason explicit initialization and placeholder test (in order) enable asynchronous tests
			init();
			test("TODO: Placeholder Test", function() { });

			model.ready(function() {
				test("polymorphic loading", function() {
					ok(typeof (UsedCar) == "function", "UsedCar type should be loaded b/c instance of that type was fetched");
					ok(model.usedCar instanceof UsedCar, "model.usedCar should be of type UsedCar even though base type was fetched");
				});

				test("object pool and sub classes", function() {
					ok(UsedCar.meta.get(200), "UsedCar(200) should be in UsedCar pool");
					ok(Car.meta.get(200), "UsedCar(200) should be in base class pool (Car)");
					ok(Product.meta.get(200), "UsedCar(200) should be in base class pool (Product)");

					ok((new Car(200)) instanceof UsedCar, "new Car(200) should be of type UsedCar");
					ok((new Product(200)) instanceof UsedCar, "new Product(200) should be of type UsedCar");
				});

				test("instanceof operator", function() {
					ok(model.driver instanceof Driver, "instance of type");
					ok(model.driver instanceof Person, "instance of basetype");

					ok(model.usedCar instanceof Product, "double hop");

					ok(!(model.driver instanceof Dealer), "not instance of unrelated type");
				});

				test("type members", function() {					
					ok(model.driver.get_Cars(), "property on final type (execute)");
					ok(model.driver.get_Name, "property on base type (exists)");
					ok(model.driver.get_Name(), "property on base type (execute)");

					ok(model.usedCar.get_Name, "property on base type (double hop, exists)");
					ok(model.usedCar.get_Name(), "property on base type (double hop, execute)");
				});

				test("formats", function() {
					ok(UsedCar.formats.shortDesc === Product.formats.shortDesc, "UsedCar inherits shortDesc from base class");
					ok(Car.formats.shortDesc === Product.formats.shortDesc, "Car inherits shortDesc from base class");

					ok(UsedCar.formats.longDesc !== Product.formats.Car, "UsedCar overrides longDesc");
					ok(Car.formats.longDesc === Product.formats.longDesc, "Car inherits longDesc from base class");

					ok(model.usedCar.toString("longDesc").startsWith("<UsedCar>"), "toString() should use inherited formats");
				});
			});
		</script>
	</head>
	<body xmlns:sys="javascript:Sys" xmlns:dataview="javascript:Sys.UI.DataView" xmlns:content="javascript:ExoWeb.UI.Content"
		xmlns:template="javascript:ExoWeb.UI.Template" sys:activate="*">
		
		<!-- QUnit Display -->
		<h1 id="qunit-header">Test Results:</h1>
		<h2 id="qunit-banner"></h2>
		<h2 id="qunit-userAgent"></h2>
		<ol id="qunit-tests"></ol>
	</body>
</html>
