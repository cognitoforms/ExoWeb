<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>Calculated Properties Tests</title>
		<script src="../Scripts/JQuery/jquery-1.3.2.js" type="text/javascript"></script>
		<link href="../Styles/QUnit/qunit.css" type="text/css" rel="stylesheet" />
		<script src="../Scripts/QUnit/qunit.js" type="text/javascript"></script>
		<script src="../Scripts/MsAjax/MicrosoftAjax.debug.js" type="text/javascript"></script>
		<script src="../Scripts/MsAjax/MicrosoftAjaxTemplates.debug.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.model.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.mapper.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.view.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.ui.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.mock.js" type="text/javascript"></script>
		<script src="../Scripts/mock-driver.js" type="text/javascript"></script>
		<script type="text/javascript">
			ExoWeb.trace.flags = {
						signal: true,
						typeInit: true,
						objectInit: true,
						propInit: true,
						listInit: true,
						lazyLoad: true,
				//		markupExt: true,
				//		"~": true,
				//		"@": true,
						context: true,
				//		tests: true,
						mocks: true
				}
						
			var ctx = ExoWeb.context({
				driver: { id: "1", from: "Driver" },
				
				// hack until Employee.All works...
				e100: { id: "100", from: "Employee" },
				e101: { id: "101", from: "Employee"},
			});

			// for some reason explicit initialization and placeholder test (in order) enable asynchronous tests
			init();
			test("TODO: Placeholder Test", function() { });

			ctx.model.ready(function() {
				function getAllowedSalesPersons() {
					return $transform(Employee.meta.known()).where(function(obj) {return obj.HireDate <= this.DateCreated;}, this);
				}
								
				test("list property", function() {
					Driver.$AllowedSalesPersons.init(ctx.model.driver, []);
					var list = ctx.model.driver.get_AllowedSalesPersons();
					
					// watch for changes
					var listChanged = false;
					Sys.Observer.addCollectionChanged(list, function() { listChanged = true; });
					
					// define the calculated property					
					Driver.$AllowedSalesPersons.calculated({
						fn: getAllowedSalesPersons,
						basedOn: ["this.DateCreated" /*, "this.Employee.HireDate"*/]
					});
					
					ok(ctx.model.driver.get_AllowedSalesPersons() === list, "setting up a calculated property should not cause a new list to be created so observers will still work");
					ok(listChanged, "setting up a calculated property should cause the list property to raise a collection change event");
					same(getAllowedSalesPersons.apply(ctx.model.driver), list, "calculated property should have the correct values in it");

					var curDate = ctx.model.driver.get_DateCreated();

					// cause the list to recalculate but have NO changes
					listChanged = false;
					ctx.model.driver.set_DateCreated(new Date(curDate.getFullYear(), curDate.getMonth(), curDate.getDate()+1));
					ok(!listChanged, "if the calculated list has no changes, don't raise a collecton changed event");

					// cause the list to recalculate and HAVE changes (via Driver)
					listChanged = false;
					ctx.model.driver.set_DateCreated(new Date("1/2/2009"));
					ok(listChanged, "list should change b/c the driver's created date changed");					
					same(getAllowedSalesPersons.apply(ctx.model.driver), list, "calculated property should have the correct values in it");

					/*
					TODO: rules than span types
					// cause the list to recalculate and HAVE changes (via Driver)
					listChanged = false;
					ctx.model.e101.set_HireDate(new Date("1/3/2009"));
					ok(listChanged, "list should change b/c the employee's hire date changed");					
					same(getAllowedSalesPersons.apply(ctx.model.driver), list, "calculated property should have the correct values in it");
					*/
				});
			});
		</script>
	</head>
	<body xmlns:sys="javascript:Sys" xmlns:dataview="javascript:Sys.UI.DataView" xmlns:content="javascript:ExoWeb.UI.Content"
		xmlns:template="javascript:ExoWeb.UI.Template" sys:activate="*">
		
		<!-- QUnit Display -->
		<h1 id="qunit-header">Test Results:</h1>
		<h2 id="qunit-banner"></h2>
		<h2 id="qunit-userAgent"></h2>
		<ol id="qunit-tests"></ol>
	</body>
</html>
