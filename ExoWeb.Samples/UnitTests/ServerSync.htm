<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>Client-Server Sync Tests</title>
		<script src="../Scripts/JQuery/jquery-1.3.2.js" type="text/javascript"></script>
		<link href="../Styles/QUnit/qunit.css" type="text/css" rel="stylesheet" />
		<script src="../Scripts/QUnit/qunit.js" type="text/javascript"></script>
		<script src="../Scripts/MsAjax/MicrosoftAjax.debug.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.js" type="text/javascript"></script>
		<script src="Common/exoweb.qunit.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.model.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.mapper.js" type="text/javascript"></script>
		<script src="../Scripts/ExoWeb/exoweb.mock.js" type="text/javascript"></script>
		<script src="../Scripts/mock-driver.js" type="text/javascript"></script>
		<script src="../Scripts/changeset.js" type="text/javascript"></script>
		<script type="text/javascript">
			ExoWeb.trace.flags.sync = true;
			ExoWeb.trace.flags.mocks = true;
			ExoWeb.Mock.objectProviderDelay = 0;
			ExoWeb.Mock.typeProviderDelay = 0;
			ExoWeb.Mock.syncProviderDelay = 0;
			ExoWeb.Mock.simulateLazyLoading = false;

			var model = $model({ driver: { id: "1", from: "Driver" } });

			setupTest("test1", { description: "Apply Init with ID Translation", expect: 7 }, function() {
				var undefined;

				equals(Dealer.meta.get("+c0"), undefined, "Dealer should not exist before init");

				model.syncObject.apply(new ChangeSet().init("Dealer", "?1").build());

				ok(Dealer.meta.get("+c0"), "Dealer should exist after init by client generated id");
				
				// check that id translation is setup
				equals(model.syncObject._translator.forward("Dealer", "+c0"), "?1", "Should be able to translate from client id to server id");
				equals(model.syncObject._translator.reverse("Dealer", "?1"), "+c0", "Should be able to translate from server id to client id");
				
				// inpect the change log
				equals(model.syncObject._queue.length, 1, "We should have 1 change in the log");
				equals(model.syncObject._queue[0].__type, "InitNew:#ExoGraph", "It should be an init change");
				equals(model.syncObject._queue[0].instance.id, "?1", "The id should be the server id, NOT the client id");
			});

			setupTest("test2", { description: "Apply Reference Property Change", expect: 2 }, function() {
				equals(model.driver.Owner.Location.meta.id, "1", "Driver's owner's location should be 1");

				model.syncObject.apply(new ChangeSet().ref("CarOwner", "1", "Location", "OwnerLocation", "1", "2").build());

				equals(model.driver.Owner.Location.meta.id, "2", "Driver's owner's location should be 2");
			});

			setupTest("test3", { description: "Apply Value Property Change", expect: 2 }, function() {
				equals(model.driver.Owner.Location.Name, "Work", "Driver's owner's location name should be Work");

				model.syncObject.apply(new ChangeSet().val("OwnerLocation", "2", "Name", "Work", "Play").build());

				equals(model.driver.Owner.Location.Name, "Play", "Driver's owner's location name should be Play");
			});

			setupTest("test4", { description: "Apply List Property Changes", expect: 7 }, function() {
				equals(model.driver.Cars.length, 2, "Driver should have 2 cars");
				equals(model.driver.Cars[0].Name, "Sentra", "First car is Sentra");
				equals(model.driver.Cars[1].Name, "Bike", "Second car is Bike");

				model.syncObject.apply(new ChangeSet().delRef("Driver", "1", "Cars", "Car", "2").build());

				equals(model.driver.Cars.length, 1, "Driver should now have 1 car");
				equals(model.driver.Cars[0].Name, "Sentra", "First car is Sentra");

				model.syncObject.apply(new ChangeSet().addRef("Driver", "1", "Cars", "Car", "3").build());

				equals(model.driver.Cars.length, 2, "Driver should now have 2 cars");
				equals(model.driver.Cars[1].Name, "Tank", "Second car is Tank");
			});

			setupTest("test5", { description: "Client-Server Changes from Server", expect: 4 }, function() {
				var bryan = Driver.meta.get("1");
				var bob = CarOwner.meta.get("1");
				var joe = CarOwner.meta.get("2");

				equals(bob.Drivers.length, 1, "Bob should have one driver");
				equals(joe.Drivers.length, 0, "Joe should have no drivers");

				bryan.set_Owner(joe);

				ExoWeb.Mock.sync(function(type, id, changes) {
					// mock server behavior of updating Location.Owners list
					return new ChangeSet()
						.delRef("CarOwner", bob.meta.id, "Drivers", "Driver", bryan.meta.id)
						.addRef("CarOwner", joe.meta.id, "Drivers", "Driver", bryan.meta.id)
						.build();
				});

				model.sync("driver");

				equals(bob.Drivers.length, 0, "Bob should now have zero drivers");
				equals(joe.Drivers.length, 1, "Joe should now have one driver");
			});

			setupTest("test6", { description: "Client-Server Commit (Changing Ids)", expect: 13 }, function() {
				var matt = new Driver();
				var mattLegacyId = matt.meta.id;

				// no changes on server
				ExoWeb.Mock.sync(null);
				model.sync("driver");

				equals(matt.meta.id, mattLegacyId, "Matt's id should still be the temporary id");

				var mattNewId = "1000";

				// simulate commit behavior
				ExoWeb.Mock.sync(function(type, id, changes) {
					return [
						{
							__type: "Commit:#ExoGraph",
							idChanges: [{ type: "Driver", from: mattLegacyId, to: mattNewId}]
						}
					];
				});
				model.sync("driver");

				equals(model.syncObject._queue.length, 0, "Queue should be empty after commit");

				equals(matt.meta.id, mattNewId, "Matt's id should be a new permanent id");
				equals(Driver.meta.get(mattLegacyId), matt, "Matt can still be retieved by the old id");
				equals(Driver.meta.get(mattNewId), matt, "Matt can also be retieved by the new id");

				ok(Driver.meta._pool[mattNewId], "Matt's new id is a key in the Driver pool");
				ok(!Driver.meta._legacyPool[mattNewId], "Matt's new id is not a key in the Driver legacy pool");
				ok(Driver.meta._legacyPool[mattLegacyId], "Matt's legacy id is a key in the Driver legacy pool");
				ok(!Driver.meta._pool[mattLegacyId], "Matt's legacy id is not a key in the Driver pool");

				ok(Person.meta._pool[mattNewId], "Matt's new id is a key in the Person pool");
				ok(!Person.meta._legacyPool[mattNewId], "Matt's new id is not a key in the Person legacy pool");
				ok(Person.meta._legacyPool[mattLegacyId], "Matt's legacy id is a key in the Person legacy pool");
				ok(!Person.meta._pool[mattLegacyId], "Matt's legacy id is not a key in the Person pool");
			});

			timeoutTests(5000);

			model.ready(function() {
				executeTest("test1");
				executeTest("test2");
				executeTest("test3");
				executeTest("test4");
				executeTest("test5");
				executeTest("test6");
			});
		</script>
	</head>
	<body xmlns:sys="javascript:Sys" xmlns:dataview="javascript:Sys.UI.DataView" sys:activate="*">
		
		<!-- QUnit Display -->
		<h1 id="qunit-header">Test Results:</h1>
		<h2 id="qunit-banner"></h2>
		<h2 id="qunit-userAgent"></h2>
		<ol id="qunit-tests"></ol>
	</body>
</html>
